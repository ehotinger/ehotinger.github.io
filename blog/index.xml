<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Eric Hotinger</title>
    <link>https://ehotinger.com/blog/</link>
    <description>Recent content in Blog on Eric Hotinger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 08 Sep 2020 22:20:29 -0700</lastBuildDate>
    
	<atom:link href="https://ehotinger.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Give up on CI/CD</title>
      <link>https://ehotinger.com/blog/give-up-on-ci-cd/</link>
      <pubDate>Tue, 08 Sep 2020 22:20:29 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/give-up-on-ci-cd/</guid>
      <description>Give up on your glorious vision of CI/CD. I don&amp;rsquo;t want that shit and your customers don&amp;rsquo;t either. If you break me one more time this month I will lose my fucking mind and start looking at competitors. I can afford to wait 3 months for your new features. On second thought, I don&amp;rsquo;t care if I get any new features ever again.
I&amp;rsquo;ve written software whose sole purpose was to make CI/CD better.</description>
    </item>
    
    <item>
      <title>The Best Developer I Have Ever Met Was the Worst</title>
      <link>https://ehotinger.com/blog/the-best-dev-i-met-was-the-worst/</link>
      <pubDate>Tue, 25 Aug 2020 21:33:08 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/the-best-dev-i-met-was-the-worst/</guid>
      <description>Many moons ago I met the best developer I have ever encountered. I was enamored by their ability to recall any piece of information that they have ever seen. They had dozens of patents, scientific papers, and a work history nothing short of genius. They built tools and languages I used on a daily basis. They were a true prodigy and I could not believe I had the privilege of working under them.</description>
    </item>
    
    <item>
      <title>The Developer&#39;s Outlook Rules</title>
      <link>https://ehotinger.com/blog/the-developers-outlook-rules/</link>
      <pubDate>Sat, 31 Aug 2019 14:30:43 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/the-developers-outlook-rules/</guid>
      <description>Every developer should have a To, CC, and Other folder in Outlook.
You should have 3 main rules in order from most to least important:
 Anything sent to me as a To goes to the To folder Anything sent to me as a CC goes to the CC folder Anything else gets sent to the Other folder.  You should never look at your original Inbox folder from this point on.</description>
    </item>
    
    <item>
      <title>GitHub Pages, Route 53, Cloud Front, and SSL</title>
      <link>https://ehotinger.com/blog/github-pages-aws-ssl/</link>
      <pubDate>Sat, 31 Aug 2019 00:05:35 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/github-pages-aws-ssl/</guid>
      <description>This is how I set up my blog which uses GitHub pages to have a custom domain and SSL all on AWS for $12/year &amp;ndash; just the cost of the .com. The other services are all in the free-tier.
Register your domain Use Route 53: https://aws.amazon.com/route53/
 All you have to do here is go through the Register Domain workflow that Amazon has created. It&amp;rsquo;ll allow you to buy a domain name of your choice for about $12 (for a .</description>
    </item>
    
    <item>
      <title>ACR Tasks Image Vulnerability Scanning</title>
      <link>https://ehotinger.com/blog/acr-tasks-image-scanning/</link>
      <pubDate>Fri, 19 Jul 2019 18:23:31 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/acr-tasks-image-scanning/</guid>
      <description>In this blog you&amp;rsquo;ll learn how to set up vulnerability scanning for all of your container images using Azure Container Registry Tasks and Aqua&amp;rsquo;s microscanner. By the end, you&amp;rsquo;ll know how to create a relatively complex workflow which prevents your images getting pushed to a container registry if they have vulnerabilities found during build time, preventing the distribution of them entirely.
This is generic, so you can bring whatever image scanner you prefer.</description>
    </item>
    
    <item>
      <title>Azure Container Registry Tasks Daily Autopurge</title>
      <link>https://ehotinger.com/blog/acr-tasks-daily-autopurge/</link>
      <pubDate>Tue, 16 Jul 2019 14:15:54 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/acr-tasks-daily-autopurge/</guid>
      <description>Azure Container Registry Tasks came out with a lot of new features in the last year. Many people don&amp;rsquo;t realize the insane potential of this service, so I wanted to share a few things that you probably didn&amp;rsquo;t know and some of the things the team has been working on.
In particular, I wanted to use one of the most common feature requests of the Azure Container Registry - automatic garbage collection of old or unused tags/manifests/images - as an example of how you can make the world your oyster using ACR Tasks.</description>
    </item>
    
    <item>
      <title>Bypassing the character limit displayed when debugging with Delve and VSCode</title>
      <link>https://ehotinger.com/blog/vscode-delve-debugging/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/vscode-delve-debugging/</guid>
      <description>Debugging Go applications with Visual Studio Code and Delve is extremely powerful. However, there are some default settings which you may want to tweak to improve this experience and they&amp;rsquo;re not straightforward to find out.
Sometimes when you&amp;rsquo;re debugging if a variable&amp;rsquo;s value is really long, i.e. more than 64 characters, you&amp;rsquo;ll see the value&amp;rsquo;s content end as &amp;ldquo;&amp;hellip;+7 more&amp;rdquo; or however many characters were truncated. To get around this, you need to customize your workspace or user settings in Visual Studio Code.</description>
    </item>
    
    <item>
      <title>Installing Go on Windows (including Make)</title>
      <link>https://ehotinger.com/blog/installing-go-windows/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/installing-go-windows/</guid>
      <description>This is an extremely brief guide to setting up Go on Windows. There are plenty of guides out there for setting up Go, but none that also include how to get your Makefiles working cross-platform easily. The easiest way I&amp;rsquo;ve found to do this is to change shells. This is especially true if you have Makefiles like I do, where $(shell) is everywhere. With the default shell you&amp;rsquo;ll end up with CREATE PROCESS(NULL, .</description>
    </item>
    
    <item>
      <title>Installing Hugo</title>
      <link>https://ehotinger.com/blog/installing-hugo/</link>
      <pubDate>Thu, 31 May 2018 12:02:45 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/installing-hugo/</guid>
      <description>This is a quick-start guide to setting up Hugo with GitHub pages, since it took too much effort to find the full instructions anywhere else. It should hopefully take you ~15 minutes to complete the entire thing.
 Make two GitHub repositories, i.e., https://github.com/ehotinger/blog and https://github.com/ehotinger/ehotinger.github.io - the first repository is for the unrendered Hugo content, and the second is for the rendered content. Note: you could just have one repository as your GitHub page, but this approach allows you to easily switch off GitHub pages if you want to.</description>
    </item>
    
  </channel>
</rss>