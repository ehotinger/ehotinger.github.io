<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dev on Eric Hotinger</title>
    <link>https://ehotinger.com/tags/dev/</link>
    <description>Recent content in dev on Eric Hotinger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 08 Jan 2023 14:13:36 -0800</lastBuildDate><atom:link href="https://ehotinger.com/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Behavioral Interviews: Framework and Strategy</title>
      <link>https://ehotinger.com/blog/behavioral-interviews-framework-and-strategy/</link>
      <pubDate>Sun, 08 Jan 2023 14:13:36 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/behavioral-interviews-framework-and-strategy/</guid>
      <description>Behavioral Interviews: Framework and Strategy This post is the final framework and strategy for technical interviews. If you haven&amp;rsquo;t already, be sure to check out my similar posts on System Design Interviews and Coding Interviews too.
1. The Framework Use the Situation, Task, Action, Result framework. Also known as STAR.
Situation: The interviewer wants you to present a recent challenging situation in which you found yourself. Task: What were you required to achieve?</description>
    </item>
    
    <item>
      <title>Coding Interviews: Framework and Strategy</title>
      <link>https://ehotinger.com/blog/coding-interviews-framework-and-strategy/</link>
      <pubDate>Sun, 08 Jan 2023 12:22:00 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/coding-interviews-framework-and-strategy/</guid>
      <description>Coding Interviews: Framework and Strategy The goal of this post is to provide you with a reliable strategy and framework for general coding and technical interviews. At the end, I provide a rough calibration guide to be used in any coding interview so that you can evaluate your performance and others&amp;rsquo; performance with mock practice once you understand the framework and strategies.
The Framework Every coding interview can be broken into four high-level steps:</description>
    </item>
    
    <item>
      <title>Windows Subsystem for Linux Installation</title>
      <link>https://ehotinger.com/blog/windows-subsystem-for-linux-installation/</link>
      <pubDate>Sat, 14 Aug 2021 12:14:50 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/windows-subsystem-for-linux-installation/</guid>
      <description>A few common problems that I hit when installing WSL. This is my personal mini guide to get it up and running in a few minutes.
First, you can visit https://docs.microsoft.com/en-us/windows/wsl/install-win10#simplified-installation-for-windows-insiders to get a beta build and run the commands to install WSL.
WSL can fail on a new machine even after this because it relies on virtualization:
Enable Hyper-V (Turn Windows features on or off -&amp;gt; Hyper-V) Enable virtualization in the BIOS (go to your CPU Config and you&amp;rsquo;ll find it) Bonus oddities:</description>
    </item>
    
    <item>
      <title>Invisible</title>
      <link>https://ehotinger.com/blog/invisible/</link>
      <pubDate>Tue, 06 Jul 2021 23:58:35 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/invisible/</guid>
      <description>I&amp;rsquo;ve created something magical: an invisible compass. The product is not astonishing; it&amp;rsquo;s fragile and young, yet blissful. It hasn&amp;rsquo;t been announced yet, but it will be later this year. I hope you will find it equally mesmerizing.
For the last six months, I&amp;rsquo;ve worked tirelessly to offer a chance for it to succeed. It&amp;rsquo;s not my own company and I&amp;rsquo;m not getting paid some exuberant amount of money to stay committed to an arbitrary mission.</description>
    </item>
    
    <item>
      <title>Bypassing the character limit displayed when debugging with Delve and VSCode</title>
      <link>https://ehotinger.com/blog/vscode-delve-debugging/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/vscode-delve-debugging/</guid>
      <description>Debugging Go applications with Visual Studio Code and Delve is extremely powerful. However, there are some default settings which you may want to tweak to improve this experience and they&amp;rsquo;re not straightforward to find out.
Sometimes when you&amp;rsquo;re debugging if a variable&amp;rsquo;s value is really long, i.e. more than 64 characters, you&amp;rsquo;ll see the value&amp;rsquo;s content end as &amp;ldquo;&amp;hellip;+7 more&amp;rdquo; or however many characters were truncated. To get around this, you need to customize your workspace or user settings in Visual Studio Code.</description>
    </item>
    
    <item>
      <title>Installing Go on Windows (including Make)</title>
      <link>https://ehotinger.com/blog/installing-go-windows/</link>
      <pubDate>Sat, 07 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/installing-go-windows/</guid>
      <description>This is an extremely brief guide to setting up Go on Windows. There are plenty of guides out there for setting up Go, but none that also include how to get your Makefiles working cross-platform easily. The easiest way I&amp;rsquo;ve found to do this is to change shells. This is especially true if you have Makefiles like I do, where $(shell) is everywhere. With the default shell you&amp;rsquo;ll end up with CREATE PROCESS(NULL, .</description>
    </item>
    
    <item>
      <title>Installing Hugo</title>
      <link>https://ehotinger.com/blog/installing-hugo/</link>
      <pubDate>Thu, 31 May 2018 12:02:45 -0700</pubDate>
      
      <guid>https://ehotinger.com/blog/installing-hugo/</guid>
      <description>This is a quick-start guide to setting up Hugo with GitHub pages, since it took too much effort to find the full instructions anywhere else. It should hopefully take you ~15 minutes to complete the entire thing.
Make two GitHub repositories, i.e., https://github.com/ehotinger/blog and https://github.com/ehotinger/ehotinger.github.io - the first repository is for the unrendered Hugo content, and the second is for the rendered content. Note: you could just have one repository as your GitHub page, but this approach allows you to easily switch off GitHub pages if you want to.</description>
    </item>
    
  </channel>
</rss>
