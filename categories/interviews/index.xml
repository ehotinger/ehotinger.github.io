<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interviews on Eric Hotinger</title>
    <link>https://ehotinger.com/categories/interviews/</link>
    <description>Recent content in interviews on Eric Hotinger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 08 Jan 2023 14:13:36 -0800</lastBuildDate><atom:link href="https://ehotinger.com/categories/interviews/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Behavioral Interviews Framework and Strategy</title>
      <link>https://ehotinger.com/blog/behavioral-interviews-framework-and-strategy/</link>
      <pubDate>Sun, 08 Jan 2023 14:13:36 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/behavioral-interviews-framework-and-strategy/</guid>
      <description>Behavioral Interviews: Framework and Strategy This post is the final framework and strategy for technical interviews. If you haven&amp;rsquo;t already, b sure to check out my similar posts on System Design Interviews and Coding Interviews too.
1. The Framework Use the Situation, Task, Action, Result framework. Also known as STAR.
Situation: The interviewer wants you to present a recent challenging situation in which you found yourself. Task: What were you required to achieve?</description>
    </item>
    
    <item>
      <title>Coding Interviews: Framework and Strategy</title>
      <link>https://ehotinger.com/blog/coding-interviews-framework-and-strategy/</link>
      <pubDate>Sun, 08 Jan 2023 12:22:00 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/coding-interviews-framework-and-strategy/</guid>
      <description>Coding Interviews: Framework and Strategy The goal of this post is to provide you with a reliable strategy and framework for general coding and technical interviews. At the end, I provide a rough calibration guide to be used in any coding interview so that you can evaluate your performance and others&amp;rsquo; performance with mock practice once you understand the framework and strategies.
The Framework Every coding interview can be broken into four high-level steps:</description>
    </item>
    
    <item>
      <title>System Design Interviews: Framework and Strategy</title>
      <link>https://ehotinger.com/blog/system-design-interviews-framework-and-strategy/</link>
      <pubDate>Sun, 08 Jan 2023 09:22:14 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/system-design-interviews-framework-and-strategy/</guid>
      <description>System Design Interviews: Framework and Strategy System design interviews are often the most difficult technical interviews and can be daunting to tackle. They require a candidate to gather requirements, deal with ambiguity, communicate, and optimize their solution using all of their computer science knowledge. To make matters worse, these interviews are open-ended with hundreds of potential variations to achieve the desired end state of a system. How could anyone expect someone to design such a complex system in only an hour of time?</description>
    </item>
    
    <item>
      <title>Availability Numbers Every Programmer Should Know</title>
      <link>https://ehotinger.com/blog/availability-numbers-every-programmer-should-know/</link>
      <pubDate>Sun, 08 Jan 2023 07:22:14 -0800</pubDate>
      
      <guid>https://ehotinger.com/blog/availability-numbers-every-programmer-should-know/</guid>
      <description>Availability Numbers Every Programmer Should Know Availability refers to the amount of continuous uptime of a service. This is measured in a percentage, where 100% means a service has zero downtime and 0% means the service is never operational.
A service level agreement (SLA) is a commitment from a provider to a customer. When SLAs are mentioned for availability, providers will be stating their commitment to the uptime of the system, after which you are usually entitled to some form of compensation.</description>
    </item>
    
  </channel>
</rss>
